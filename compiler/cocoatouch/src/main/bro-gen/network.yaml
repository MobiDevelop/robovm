package: org.robovm.apple.network
include: [foundation, dispatch, security]
library: Network
framework: Network
clang_args: ['-x', 'objective-c']
headers:
    - /System/Library/Frameworks/Network.framework/Headers/Network.h

private_typedefs:
    dispatch_data_t: DispatchData
    '__CFError *': NSError

typedefs: {}

enums:
    nw_endpoint_type_t: {prefix: nw_endpoint_type_, name: NWEndpointType}
    nw_interface_type_t: {prefix: nw_interface_type_, name: NWInterfaceType}
    nw_service_class_t: {prefix: nw_service_class_, name: NWServiceClass}
    nw_multipath_service_t: {prefix: nw_multipath_service_, name: NWMultipathService}
    nw_parameters_expired_dns_behavior_t: {prefix: nw_parameters_expired_dns_behavior_, name: NWParametersExpiredDnsBehavior, nw_parameters_expired_dns_behavior_default: defaultBehaviour}
    nw_path_status_t: {prefix: nw_path_status_, name: NWPathStatus}
    nw_error_domain_t: {prefix: nw_error_domain_, name: NWErrorDomain}
    nw_connection_state_t: {prefix: nw_connection_state_, name: NWConnectionState}
    nw_ip_version_t: {prefix: nw_ip_version_, name: NWIpVersion}
    nw_ip_ecn_flag_t: {prefix: nw_ip_ecn_flag_, name: NWIpEcnFlag}
    nw_listener_state_t: {prefix: nw_listener_state_, name: NWListenerState}
    # ios13 activity
    nw_txt_record_find_key_t: {prefix: nw_txt_record_find_key_, name: NWTxtRecordFindKey}
    nw_browse_result_change_t: {prefix: nw_browse_result_change_, first: nw_browse_result_change_invalid, bits: true, name: NWBrowseResultChange}
    nw_browser_state_t: {prefix: nw_browser_state_, name: NWBrowseState}
    nw_report_resolution_source_t: {prefix: nw_report_resolution_source_, name: NWReportResolutionSource}
    nw_data_transfer_report_state_t: {prefix: nw_data_transfer_report_state_, name: NWDataTransferReportState}
    nw_ethernet_channel_state_t: {prefix: nw_ethernet_channel_state_, name: NWEthernetChannelState}
    nw_framer_start_result_t: {prefix: nw_framer_start_result_, name: NWFramerStartResult}
    nw_ip_local_address_preference_t: {prefix: nw_ip_local_address_preference_, name: NWIpLocalAddressPreference, nw_ip_local_address_preference_default: Default}
    nw_ws_opcode_t: {prefix: nw_ws_opcode_, name: NWWsOpcode}
    nw_ws_close_code_t: {prefix: nw_ws_close_code_, name: NWWsCoseCode}
    nw_ws_version_t: {prefix: nw_ws_, name: NWWsVersion}
    nw_ws_response_status_t: {prefix: nw_ws_response_status_, name: NWWsResponseStatus}
classes: {}

protocols:
    OS_nw_object:
        exclude: true

    OS_nw_advertise_descriptor:
        class: true
        name: NWAdvertiseDescriptor
        extends: NWObject
        visibility: 'public final'
    NWAdvertiseDescriptor:  # FIXME: this is workaround as bro-gen uses javaname when merging annotations
        annotations: ['@NativeProtocolProxy("OS_nw_advertise_descriptor")']

    OS_nw_connection:
        class: true
        name: NWConnection
        extends: NWObject
        visibility: 'public final'
    NWConnection: # FIXME: this is workaround as bro-gen uses javaname when merging annotations
        annotations: ['@NativeProtocolProxy("OS_nw_connection")']

    OS_nw_content_context:
        class: true
        name: NWContentContext
        extends: NWObject
        visibility: 'public final'
    NWContentContext:  # FIXME: this is workaround as bro-gen uses javaname when merging annotations
        annotations: ['@NativeProtocolProxy("OS_nw_content_context")']

    OS_nw_endpoint:
        class: true
        name: NWEndpoint
        extends: NWObject
        visibility: 'public final'
    NWEndpoint:  # FIXME: this is workaround as bro-gen uses javaname when merging annotations
        annotations: ['@NativeProtocolProxy("OS_nw_endpoint")']

    OS_nw_error:
        class: true
        name: NWError
        extends: NWObject
        visibility: 'public final'
    NWError:  # FIXME: this is workaround as bro-gen uses javaname when merging annotations
        annotations: ['@NativeProtocolProxy("OS_nw_error")']

    OS_nw_interface:
        class: true
        name: NWInterface
        extends: NWObject
        visibility: 'public final'
    NWInterface:  # FIXME: this is workaround as bro-gen uses javaname when merging annotations
        annotations: ['@NativeProtocolProxy("OS_nw_interface")']

    OS_nw_listener:
        class: true
        name: NWListener
        extends: NWObject
        visibility: 'public final'
    NWListener:  # FIXME: this is workaround as bro-gen uses javaname when merging annotations
        annotations: ['@NativeProtocolProxy("OS_nw_listener")']

    OS_nw_parameters:
        class: true
        name: NWParameters
        extends: NWObject
        visibility: 'public final'
    NWParameters:  # FIXME: this is workaround as bro-gen uses javaname when merging annotations
        annotations: ['@NativeProtocolProxy("OS_nw_parameters")']

    OS_nw_path:
        class: true
        name: NWPath
        extends: NWObject
        visibility: 'public final'
    NWPath:  # FIXME: this is workaround as bro-gen uses javaname when merging annotations
        annotations: ['@NativeProtocolProxy("OS_nw_path")']

    OS_nw_path_monitor:
        class: true
        name: NWPathMonitor
        extends: NWObject
        visibility: 'public final'
    NWPathMonitor:  # FIXME: this is workaround as bro-gen uses javaname when merging annotations
        annotations: ['@NativeProtocolProxy("OS_nw_path_monitor")']

    OS_nw_protocol_definition:
        class: true
        name: NWProtocolDefinition
        extends: NWObject
        visibility: 'public final'
    NWProtocolDefinition:  # FIXME: this is workaround as bro-gen uses javaname when merging annotations
        annotations: ['@NativeProtocolProxy("OS_nw_protocol_definition")']

    OS_nw_protocol_metadata:
        class: true
        name: NWProtocolMetadata
        extends: NWObject
        visibility: 'public final'
    NWProtocolMetadata:  # FIXME: this is workaround as bro-gen uses javaname when merging annotations
        annotations: ['@NativeProtocolProxy("OS_nw_protocol_metadata")']

    OS_nw_protocol_options:
        class: true
        name: NWProtocolOptions
        extends: NWObject
        visibility: 'public final'
    NWProtocolOptions:  # FIXME: this is workaround as bro-gen uses javaname when merging annotations
        annotations: ['@NativeProtocolProxy("OS_nw_protocol_options")']

    OS_nw_protocol_stack:
        class: true
        name: NWProtocolStack
        extends: NWObject
        visibility: 'public final'
    NWProtocolStack:  # FIXME: this is workaround as bro-gen uses javaname when merging annotations
        annotations: ['@NativeProtocolProxy("OS_nw_protocol_stack")']

    OS_nw_browse_descriptor:
        class: true
        name: NWBrowseDescriptor
        extends: NWObject
        visibility: 'public final'
    NWBrowseDescriptor:  # FIXME: this is workaround as bro-gen uses javaname when merging annotations
        annotations: ['@NativeProtocolProxy("OS_nw_browse_descriptor")']

    OS_nw_browse_result:
        class: true
        name: NWBrowseResult
        extends: NWObject
        visibility: 'public final'
    NWBrowseResult:  # FIXME: this is workaround as bro-gen uses javaname when merging annotations
        annotations: ['@NativeProtocolProxy("OS_nw_browse_result")']

    OS_nw_browser:
        class: true
        name: NWBrowser
        extends: NWObject
        visibility: 'public final'
    NWBrowser:  # FIXME: this is workaround as bro-gen uses javaname when merging annotations
        annotations: ['@NativeProtocolProxy("OS_nw_browser")']

    OS_nw_data_transfer_report:
        class: true
        name: NWDataTransferReport
        extends: NWObject
        visibility: 'public final'
    NWDataTransferReport:  # FIXME: this is workaround as bro-gen uses javaname when merging annotations
        annotations: ['@NativeProtocolProxy("OS_nw_data_transfer_report")']

    OS_nw_establishment_report:
        class: true
        name: NWEstablishmentReport
        extends: NWObject
        visibility: 'public final'
    NWEstablishmentReport:  # FIXME: this is workaround as bro-gen uses javaname when merging annotations
        annotations: ['@NativeProtocolProxy("OS_nw_establishment_report")']

    OS_nw_ethernet_channel:
        exclude: true # as available only on MacOS

    OS_nw_framer:
        class: true
        name: NWFramer
        extends: NWObject
        visibility: 'public final'
    NWFramer:  # FIXME: this is workaround as bro-gen uses javaname when merging annotations
        annotations: ['@NativeProtocolProxy("OS_nw_framer")']

    OS_nw_txt_record:
        class: true
        name: NWTxtRecord
        extends: NWObject
        visibility: 'public final'
    NWTxtRecord:  # FIXME: this is workaround as bro-gen uses javaname when merging annotations
        annotations: ['@NativeProtocolProxy("OS_nw_txt_record")']

    OS_nw_ws_request:
        class: true
        name: NWWsRequest
        extends: NWObject
        visibility: 'public final'
    NWWsRequest:  # FIXME: this is workaround as bro-gen uses javaname when merging annotations
        annotations: ['@NativeProtocolProxy("OS_nw_ws_request")']

    OS_nw_ws_response:
        class: true
        name: NWWsResponse
        extends: NWObject
        visibility: 'public final'
    NWWsResponse:  # FIXME: this is workaround as bro-gen uses javaname when merging annotations
        annotations: ['@NativeProtocolProxy("OS_nw_ws_response")']
functions:

    nw_advertise_descriptor_(.*):
        class: NWAdvertiseDescriptor
        name: '#{g[0].camelize}'

    nw_content_context_get_is_final:
        class: NWContentContext
        name: isFinal
    nw_content_context_(.*):
        class: NWContentContext
        name: '#{g[0].camelize}'

    nw_connection_(.*):
        class: NWConnection
        name: '#{g[0].camelize}'

    # TODO: don't want to bother with sockaddr
    nw_endpoint_create_address:
        exclude: true
    nw_endpoint_get_address:
        exclude: true
    nw_endpoint_(create_host):
        class: NWEndpoint
        name: '#{g[0].camelize}'
        parameters:
            hostname: {type: String, marshaler: StringMarshalers.AsAsciiZMarshaler }
            port: {type: String, marshaler: StringMarshalers.AsAsciiZMarshaler }
    nw_endpoint_(create_bonjour_service):
        class: NWEndpoint
        name: '#{g[0].camelize}'
        parameters:
            name: {type: String, marshaler: StringMarshalers.AsAsciiZMarshaler }
            type: {type: String, marshaler: StringMarshalers.AsAsciiZMarshaler }
            domain: {type: String, marshaler: StringMarshalers.AsAsciiZMarshaler }
    nw_endpoint_(get_hostname|get_bonjour_service_name|get_bonjour_service_type|get_bonjour_service_domain|copy_port_string|copy_address_string|get_url):
        class: NWEndpoint
        name: '#{g[0].camelize}'
        return_type: String
        return_marshaler: StringMarshalers.AsAsciiZMarshaler
    nw_endpoint_(create_url):
        class: NWEndpoint
        name: '#{g[0].camelize}'
        parameters:
            url: {type: String, marshaler: StringMarshalers.AsAsciiZMarshaler }
    nw_endpoint_(.*):
        class: NWEndpoint
        name: '#{g[0].camelize}'

    nw_error_(.*):
        class: NWError
        name: '#{g[0].camelize}'

    nw_interface_(.*)_(.*):
        class: NWInterface
        name: '#{g[0]}#{g[1].camelize}'

    nw_parameters_copy:
        class: NWParameters
        name: copyParameters # otherwise it will break compiler on synthetic bridged method from NSObject

    nw_parameters_(.*):
        class: NWParameters
        name: '#{g[0].camelize}'
        parameters:
            interface:
                name: inf

    nw_path_monitor_(.*):
        class: NWPathMonitor
        name: '#{g[0].camelize}'

    nw_path_(.*):
        class: NWPath
        name: '#{g[0].camelize}'

    nw_protocol_definition_(.*)_(.*):
        class: NWProtocolDefinition
        name: '#{g[0]}#{g[1].camelize}'
    nw_protocol_copy_(.*)_definition:
        class: NWProtocolDefinition
        name: 'copy#{g[0]}Definition'

    nw_protocol_metadata_(.*):
        class: NWProtocolMetadata
        name: '#{g[0].camelize}'

    nw_protocol_options_(.*)_(.*):
        class: NWProtocolOptions
        name: '#{g[0]}#{g[1].camelize}'
    nw_(.*)_options_set_(.*):
        class: NWProtocolOptions
        name: 'set#{g[0].camelize}#{g[1].camelize}'
    nw_(.*)_create_options:
        class: NWProtocolOptions
        name: 'create#{g[0].camelize}Options'

    nw_protocol_stack_(.*):
        class: NWProtocolStack
        name: '#{g[0].camelize}'

    nw_listener_(.*):
        class: NWListener
        name: '#{g[0].camelize}'

    nw_ip_metadata_get_(.*)_(.*):
        class: NWProtocolMetadata
        name: 'getIp#{g[0].camelize}#{g[1].camelize}'
    nw_ip_metadata_set_(.*)_(.*):
        class: NWProtocolMetadata
        name: 'setIp#{g[0].camelize}#{g[1].camelize}'
    nw_(.*)_create_metadata:
        class: NWProtocolMetadata
        name: 'create#{g[0].camelize}Metadata'

    nw_tcp_get_available_receive_buffer:
        class: NWProtocolMetadata
        name: getTcpAvailableReceiveBuffer

    nw_tcp_get_available_send_buffer:
        class: NWProtocolMetadata
        name: getTcpAvailableSendBuffer

    nw_tls_copy_sec_protocol_options:
        class: NWProtocolOptions
        name: copySecArcProtocolOptions

    nw_tls_copy_sec_protocol_metadata:
        class: NWProtocolMetadata
        name: copySecArcProtocolMetadata

    nw_(retain|release):
        class: NWObject
        visibility: private
        name: 'nwArc#{g[0].camelize}'
        return_type: void
        parameters:
            obj:
                type: '@Pointer long'

    # ios13
    nw_txt_record_(find_key|access_key|set_key|remove_key):
        class: NWTxtRecord
        name: '#{g[0].camelize}'
        parameters:
            key: {type: String, marshaler: StringMarshalers.AsAsciiZMarshaler }
    nw_txt_record_(.*):
        class: NWTxtRecord
        name: '#{g[0].camelize}'

    nw_browse_descriptor_(create_bonjour_service):
        class: NWBrowseDescriptor
        name: '#{g[0].camelize}'
        parameters:
            type: {type: String, marshaler: StringMarshalers.AsAsciiZMarshaler }
            domain: {type: String, marshaler: StringMarshalers.AsAsciiZMarshaler }
    nw_browse_descriptor_(get_bonjour_service_type|get_bonjour_service_domain):
        class: NWBrowseDescriptor
        name: '#{g[0].camelize}'
        return_type: String
        return_marshaler: StringMarshalers.AsAsciiZMarshaler
    nw_browse_descriptor_(.*):
        class: NWBrowseDescriptor
        name: '#{g[0].camelize}'

    nw_browse_result_(.*):
        class: NWBrowseResult
        name: '#{g[0].camelize}'

    nw_browser_(.*):
        class: NWBrowser
        name: '#{g[0].camelize}'

    nw_establishment_report_(.*):
        class: NWEstablishmentReport
        name: '#{g[0].camelize}'

    nw_data_transfer_report_(.*):
        class: NWDataTransferReport
        name: '#{g[0].camelize}'

    nw_framer_message_create:
        class:  NWFramer
        name: createMessage

    nw_framer_message_(set_value|access_value|set_object_value|copy_object_value):
        class: NWProtocolMetadata
        name: 'framerMessage#{g[0].camelize}'
        parameters:
            key: {type: String, marshaler: StringMarshalers.AsAsciiZMarshaler }
    nw_framer_message_(.*):
        class: NWProtocolMetadata
        name: 'framerMessage#{g[0].camelize}'

    nw_framer_(create_definition):
        class: NWFramer
        name: '#{g[0].camelize}'
        parameters:
            identifier: {type: String, marshaler: StringMarshalers.AsAsciiZMarshaler }

    nw_framer_(.*):
        class: NWFramer
        name: '#{g[0].camelize}'

    nw_ws_options_(add_additional_header):
        class: NWProtocolOptions
        name: '#{g[0].camelize}'
        parameters:
            name: {type: String, marshaler: StringMarshalers.AsAsciiZMarshaler }
            value: {type: String, marshaler: StringMarshalers.AsAsciiZMarshaler }

    nw_ws_options_(add_subprotocol):
        class: NWProtocolOptions
        name: '#{g[0].camelize}'
        parameters:
            subprotocol: {type: String, marshaler: StringMarshalers.AsAsciiZMarshaler }

    nw_ws_options_(.*):
        class: NWProtocolOptions
        name: '#{g[0].camelize}'

    nw_ws_metadata_(.*):
        class: NWProtocolMetadata
        name: '#{g[0].camelize}'

    nw_ws_request_(.*):
        class: NWWsRequest
        name: '#{g[0].camelize}'

    nw_ws_response_(create):
        class: NWWsResponse
        name: '#{g[0].camelize}'
        parameters:
            selected_subprotocol: {type: String, marshaler: StringMarshalers.AsAsciiZMarshaler }
    nw_ws_response_(get_selected_subprotocol):
        class: NWWsResponse
        name: '#{g[0].camelize}'
        return_type: String
        return_marshaler: StringMarshalers.AsAsciiZMarshaler
    nw_ws_response_(add_additional_header):
        class: NWWsResponse
        name: '#{g[0].camelize}'
        parameters:
            name: {type: String, marshaler: StringMarshalers.AsAsciiZMarshaler }
            value: {type: String, marshaler: StringMarshalers.AsAsciiZMarshaler }
    nw_ws_response_(.*):
        class: NWWsResponse
        name: '#{g[0].camelize}'


    # Make sure we don't miss any functions if new ones are introduced in a later version
    (k?nw_.*):
        class: FixMe
        name: 'Function__#{g[0]}'

values:
    _nw_parameters_configure_protocol_(.*):
        class: NWParameters
        name: '#{g[0].upcase}'

    _nw_connection_(.*):
        class: NWConnection
        name: '#{g[0].upcase}'

    _nw_content_context_(.*):
        class: NWContentContext
        name: '#{g[0].upcase}'

    _nw_data_transfer_report_(.*):
        class: NWDataTransferReport
        name: '#{g[0].camelize}'

    # Make sure we don't miss any values if new ones are introduced in a later version
    (k?nw_.*):
        class: FixMe
        name: 'Value__#{g[0]}'
    (k?_nw_.*):
        class: FixMe
        name: 'Value__#{g[0]}'

constants:

    # Make sure we don't miss any constants if new ones are introduced in a later version
    (k?nw_.*):
        class: FixMe
        name: 'Constant__#{g[0]}'