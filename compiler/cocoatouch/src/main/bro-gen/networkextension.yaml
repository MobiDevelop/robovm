package: org.robovm.apple.networkextension
include: [foundation.yaml]
library: NetworkExtension
framework: NetworkExtension
clang_args: ['-x', 'objective-c']
headers:
    - /System/Library/Frameworks/NetworkExtension.framework/Headers/NetworkExtension.h
typedefs: {}
    
enums:
    NEVPNErrorCode: { first: NEVPNErrorConfigurationInvalid, prefix: NEVPNError }
    NEVPNStatus: {}
    NEVPNIKEAuthenticationMethod: {}
    NEVPNIKEv2CertificateType: {}
    NEVPNIKEv2EncryptionAlgorithm: {}
    NEVPNIKEv2IntegrityAlgorithm: {}
    NEVPNIKEv2DeadPeerDetectionRate: {}
    NEVPNIKEv2DiffieHellmanGroup: {}
    NEOnDemandRuleAction: {}
    NEOnDemandRuleInterfaceType: {}
    NEEvaluateConnectionRuleAction: {}

    NEAppProxyFlowError: {}
    NEProviderStopReason: {}
    NETunnelProviderError: {}
    NETunnelProviderRoutingMethod: {}
    NEFilterManagerError: {}
    NEHotspotHelperCommandType: {}
    NEHotspotHelperResult: {}
    NEHotspotHelperConfidence: {}
    NWTCPConnectionState: {}
    NWUDPSessionState: {}
    NWPathStatus: {}

classes:
    NEProvider:
        methods:
            '-createTCPConnectionToEndpoint:enableTLS:TLSParameters:delegate:':
                name: createTCPConnection
            '-createUDPSessionToEndpoint:fromEndpoint:':
                name: createUDPSession
            '-displayMessage:completionHandler:':
                name: displayMessage
    NETunnelProvider:
        methods:
            '-handleAppMessage:completionHandler:':
                trim_after_first_colon: true
            '-setTunnelNetworkSettings:completionHandler:':
                trim_after_first_colon: true
    NETunnelNetworkSettings: {}
    NEAppRule: {}
    NEFilterFlow: {}
    NEFilterBrowserFlow: {}
    NEFilterSocketFlow: {}
    NEFilterProvider:
        methods:
            '-startFilterWithCompletionHandler:':
                name: startFilter
            '-stopFilterWithReason:completionHandler:':
                name: stopFilter
    NEFilterDataProvider:
        methods:
            '-handleInboundDataFromFlow:readBytesStartOffset:readBytes:':
                name: handleInboundData
            '-handleOutboundDataFromFlow:readBytesStartOffset:readBytes:':
                name: handleOutboundData
    NEFilterDataVerdict:
        methods:
            '+remediateVerdictWithRemediationURLMapKey:remediationButtonTextMapKey:':
                name: remediateVerdict
            '+dataVerdictWithPassBytes:peekBytes:':
                name: dataVerdict
    NEFilterVerdict: {}
    NEFilterNewFlowVerdict:
        methods:
            '+remediateVerdictWithRemediationURLMapKey:remediationButtonTextMapKey:':
                name: remediateVerdict
            '+URLAppendStringVerdictWithMapKey:':
                name: URLAppendStringVerdict
            '+filterDataVerdictWithFilterInbound:peekInboundBytes:filterOutbound:peekOutboundBytes:':
                name: filterDataVerdict
    NEFilterControlVerdict: {}
    NEFilterRemediationVerdict: {}
    NEFilterManager: {}
    NEFilterProviderConfiguration: {}
    NEHotspotNetwork: {}
    NEHotspotHelperCommand: {}
    NEHotspotHelperResponse: {}
    NEHotspotHelper:
        methods:
            '+registerWithOptions:queue:handler:':
                name: register
                parameters:
                    'queue':
                        type: org.robovm.apple.dispatch.DispatchQueue
    NWTCPConnection:
        methods:
            '-init.*':
                name: init
            '-readLength:completionHandler:':
                name: read
            '-readMinimumLength:maximumLength:completionHandler:':
                name: read
            '-write:completionHandler:':
                name: write
    NWUDPSession:
        methods:
            '-init.*':
                name: init
            '-setReadHandler:maxDatagrams:':
                trim_after_first_colon: true
            '-write.*':
                trim_after_first_colon: true
    NWPath: {}
    NWEndpoint: {}
    NWHostEndpoint:
        methods:
            '+endpointWithHostname:port:':
                name: create
    NEDNSSettings: {}
    NWTLSParameters: {}
    NEProxyServer:
        methods:
            '-init.*':
                name: init
    NEProxySettings: {}


    NEVPNError:
        extends: NSError
        annotations: ['@StronglyLinked']

    NEOnDemandRule: # DONE
        properties:
            '(DNSSearchDomainMatch|DNSServerAddressMatch|SSIDMatch)':
                type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsStringListMarshaler.class) List<String>'
    NEOnDemandRuleConnect: {} # DONE
    NEOnDemandRuleDisconnect: {} # DONE
    NEOnDemandRuleIgnore: {} # DONE
    NEOnDemandRuleEvaluateConnection: # DONE
        properties:
            'connectionRules':
                type: NSArray<NEEvaluateConnectionRule>
    NEEvaluateConnectionRule: # DONE
        properties:
            'matchDomains':
                type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsStringListMarshaler.class) List<String>'
            'useDNSServers':
                name: DNSServers
                type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsStringListMarshaler.class) List<String>'
        methods:
            '-init.*':
                name: init
                parameters:
                    domains:
                        type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsStringListMarshaler.class) List<String>'
    NEVPNConnection: # DONE
        methods:
            '-startVPNTunnelAndReturnError:':
                name: startVPNTunnel
                throws: NSErrorException
            '-startVPNTunnelWithOptions:andReturnError:':
                name: startVPNTunnel
                throws: NSErrorException
    NEVPNManager: # DONE
        properties:
            'onDemandRules':
                type: NSArray<NEOnDemandRule>
        methods:
            '-loadFromPreferencesWithCompletionHandler:':
                name: loadFromPreferences
            '-removeFromPreferencesWithCompletionHandler:':
                name: removeFromPreferences
            '-saveToPreferencesWithCompletionHandler:':
                name: saveToPreferences
            '+sharedManager':
                property: true
    NEVPNProtocol: # DONE
        properties:
            'disconnectOnSleep':
                name: disconnectsOnSleep
    NEVPNProtocolIPSec: # DONE
        properties:
            'useExtendedAuthentication':
                name: usesExtendedAuthentication
    NEVPNProtocolIKEv2: {} # DONE
    NEVPNIKEv2SecurityAssociationParameters: {} # DONE

protocols: {}

functions:
    # Make sure we don't miss any functions if new ones are introduced in a later version
    (k?NE.*):
        class: NetworkExtension
        name: 'Function__#{g[0]}'

values:
    NEVPNErrorDomain:
        class: NEVPNError
        name: getClassDomain

    NEFilterErrorDomain:
        class: NEFilterManagerError
        name: getClassDomain

    NETunnelProviderErrorDomain:
        class: NETunnelProviderError
        name: getClassDomain

    NEAppProxyErrorDomain:
        class: NEAppProxyFlowError
        name: getClassDomain

    # NEFilterProvider
    NEFilterProvider(RemediationMapRemediationURLs|RemediationMapRemediationButtonTexts):
        class: NEFilterProvider
        name: '#{g[0]}'

    # NEFilterManager
    NEFilter(ConfigurationDidChangeNotification):
        class: NEFilterManager
        name: '#{g[0]}'

    # NEVPNManager
    NEVPN(ConfigurationChangeNotification):
        class: NEVPNManager
        name: '#{g[0]}'
        type: NSString

    # NEVPNConnection
    NEVPN(StatusDidChangeNotification):
        class: NEVPNConnection
        name: '#{g[0]}'
        type: NSString
    NEVPNConnection(StartOptionUsername|StartOptionPassword):
        class: NEVPNConnection
    # NEHotspotHelper
    kNEHotspotHelper(OptionDisplayName):
        class: NEHotspotHelper
        name: '#{g[0]}'

    # Make sure we don't miss any values if new ones are introduced in a later version
    (k?NE.*):
        class: NetworkExtension
        name: 'Value__#{g[0]}'

constants:
    # Make sure we don't miss any constants if new ones are introduced in a later version
    (k?NE.*):
        class: NetworkExtension
        name: 'Constant__#{g[0]}'
